// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package sqlcCode

import (
	"context"
	"database/sql"
)

const deleteAllRecords = `-- name: DeleteAllRecords :exec
DELETE FROM topstories
`

func (q *Queries) DeleteAllRecords(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllRecords)
	return err
}

const getTimeFromDB = `-- name: GetTimeFromDB :one
SELECT DISTINCT TimeStamp FROM topstories LIMIT 1
`

func (q *Queries) GetTimeFromDB(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getTimeFromDB)
	var timestamp string
	err := row.Scan(&timestamp)
	return timestamp, err
}

const insertData = `-- name: InsertData :execresult
INSERT INTO topstories (STORY_ID, TITLE, SCORE, URL, TimeStamp) VALUES (?,?,?,?,?)
`

type InsertDataParams struct {
	StoryID   int32
	Title     string
	Score     string
	Url       string
	Timestamp string
}

func (q *Queries) InsertData(ctx context.Context, arg InsertDataParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertData,
		arg.StoryID,
		arg.Title,
		arg.Score,
		arg.Url,
		arg.Timestamp,
	)
}

const listAllStories = `-- name: ListAllStories :many
SELECT story_id, title, score, url, timestamp FROM topstories
`

func (q *Queries) ListAllStories(ctx context.Context) ([]Topstory, error) {
	rows, err := q.db.QueryContext(ctx, listAllStories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topstory
	for rows.Next() {
		var i Topstory
		if err := rows.Scan(
			&i.StoryID,
			&i.Title,
			&i.Score,
			&i.Url,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
